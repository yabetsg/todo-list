(()=>{"use strict";const t=()=>({addButton:document.querySelector(".addButton"),cancelButton:document.querySelector(".cancelButton"),addProjectButton:document.querySelector(".addProjectButton"),addTaskButton:document.querySelector(".addTaskButton"),projectFormContainer:document.querySelector(".projectFormContainer"),todoFormContainer:document.querySelector(".todoFormContainer"),projectList:document.querySelector(".projectList"),projectForm:document.querySelector(".projectForm"),todoForm:document.querySelector(".todoForm"),projectNameInput:document.querySelector(".projectNameInput"),todoTaskInput:document.querySelector(".todoTaskInput"),taskList:document.querySelector(".tasks"),allTaskLists:document.querySelector(".todoTitle"),projectNameContainer:document.querySelector(".projectNameContainer"),mainTitle:document.querySelector(".mainTitle")});class e{constructor(t,e){this.title=t,this.name=e,this.list=[],this.list2=[]}getTitle(){return this.title}setTitle(t){this.title=t}getName(){return this.name}setName(t){this.name=t}setNameList(t){this.list.push(t)}setTitleList(t){this.list2.push(t)}getDueDate(){return this.dueDate}setDueDate(){this.dueDate=this.dueDate}}const o=t().addProjectButton,n=t().projectFormContainer,s=t().addTaskButton,i=t().todoFormContainer,r=t().todoForm,c=t().projectForm,a=t().projectList,l=t().projectNameInput,d=t().todoTaskInput,u=t().taskList,m=(t().projectNameContainer,t().mainTitle);t().allTaskLists;let p=0;o.addEventListener("click",(()=>{i.classList.remove("active"),n.classList.add("active")})),s.addEventListener("click",(()=>{n.classList.remove("active"),i.classList.add("active")})),new class{constructor(t){this.title=t,this.list=[]}getTitle(){return this.title}setTitle(t){this.title=t}setList(t){this.list.push(t)}};const h=[],T=((()=>{const t=new e;c.addEventListener("submit",(e=>{p=0;const o=document.createElement("button");o.classList.add("projectNameContainer");const s=document.createElement("i"),i=document.createElement("span");t.setTitle(l.value),i.innerText=t.getTitle(),t.setNameList({tite:t.getTitle()}),o.appendChild(s),o.appendChild(i),a.appendChild(o),h.push({title:t.getTitle()}),console.log(h),n.classList.remove("active"),l.value="",o.classList.contains("projectNameContainer")&&o.addEventListener("click",(t=>{for(;u.firstChild;)u.removeChild(u.firstChild);const e=t.target.innerText;console.log(t.target.innerText),m.innerText=e;for(let t=0;t<h.length;t++){const e=h[t];if(e.title===m.innerText){const t=Object.keys(e);console.log(t.length);for(let o=0;o<t.length;o++)if(null!=e[`task${o}`]){const t=document.createElement("button");t.classList.add("todoTitle"),t.innerText=e[`task${o}`],u.appendChild(t)}console.log(e)}}L()}))}))})(),()=>{const t=new e;for(let e=0;e<h.length;e++){const o=h[e],n=document.createElement("button");n.classList.add("todoTitle"),t.setName(d.value),o.title===m.innerText&&(o[`task${p}`]=t.getName(),n.innerText=o[`task${p}`],u.appendChild(n),console.log(o),p++)}i.classList.remove("active"),d.value=""}),L=()=>{r.addEventListener("submit",T)};L()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,