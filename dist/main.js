(()=>{"use strict";const t=()=>({addButton:document.querySelector(".addButton"),cancelButton:document.querySelector(".cancelButton"),addProjectButton:document.querySelector(".addProjectButton"),addTaskButton:document.querySelector(".addTaskButton"),projectFormContainer:document.querySelector(".projectFormContainer"),todoFormContainer:document.querySelector(".todoFormContainer"),projectList:document.querySelector(".projectList"),projectForm:document.querySelector(".projectForm"),todoForm:document.querySelector(".todoForm"),projectNameInput:document.querySelector(".projectNameInput"),todoTaskInput:document.querySelector(".todoTaskInput"),taskList:document.querySelector(".tasks"),allTaskLists:document.querySelector(".todoTitle"),projectNameContainer:document.querySelector(".projectNameContainer"),mainTitle:document.querySelector(".mainTitle")}),e=t().todoFormContainer,o=t().todoTaskInput,n=t().taskList,r=t().mainTitle,c=new class{constructor(){this.count=0}createTask(){console.log(`storage: ${v}`);for(let t=0;t<v.length;t++){const e=v[t],c=document.createElement("button");c.classList.add("todoTitle");const a=o.value;e.title===r.innerText&&(e[`task${this.count}`]=a,c.innerText=e[`task${this.count}`],n.appendChild(c),console.log(e),this.count++)}e.classList.remove("active"),o.value=""}removeTasks(){for(;n.firstChild;)n.removeChild(n.firstChild)}},a=t().addProjectButton,s=t().projectFormContainer,i=t().addTaskButton,d=t().todoFormContainer,l=t().todoForm,u=t().projectForm,m=t().projectList,p=t().projectNameInput,T=t().taskList,k=t().mainTitle,v=[];a.addEventListener("click",(()=>{d.classList.remove("active"),s.classList.add("active")})),i.addEventListener("click",(()=>{s.classList.remove("active"),d.classList.add("active")})),u.addEventListener("submit",(t=>{c.count=0;const e=document.createElement("button");e.classList.add("projectNameContainer");const o=document.createElement("i"),n=document.createElement("span"),r=p.value;n.innerText=r,e.appendChild(o),e.appendChild(n),m.appendChild(e),v.push({title:r}),s.classList.remove("active"),p.value="",e.classList.contains("projectNameContainer")&&e.addEventListener("click",(t=>{c.removeTasks();const e=t.target.innerText;k.innerText=e;for(let t=0;t<v.length;t++){const e=v[t];if(e.title===k.innerText){const t=Object.keys(e);for(let o=0;o<t.length;o++)if(null!=e[`task${o}`]){const t=document.createElement("button");t.classList.add("todoTitle"),t.innerText=e[`task${o}`],T.appendChild(t)}}}}))})),l.addEventListener("submit",(()=>{c.createTask()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,