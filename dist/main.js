(()=>{"use strict";const e=()=>({addButton:document.querySelector(".addButton"),cancelButton:document.querySelectorAll(".cancelButton"),addProjectButton:document.querySelector(".addProjectButton"),addTaskButton:document.querySelector(".addTaskButton"),projectFormContainer:document.querySelector(".projectFormContainer"),todoFormContainer:document.querySelector(".todoFormContainer"),projectList:document.querySelector(".projectList"),projectForm:document.querySelector(".projectForm"),todoForm:document.querySelector(".todoForm"),projectNameInput:document.querySelector(".projectNameInput"),todoTaskInput:document.querySelector(".todoTaskInput"),taskList:document.querySelector(".tasks"),allTaskLists:document.querySelector(".todoTitle"),projectNameContainer:document.querySelector(".projectNameContainer"),mainTitle:document.querySelector(".mainTitle"),inbox:document.getElementById("inbox"),dueDate:document.getElementById("date"),checkIcon:document.getElementsByTagName("p"),deleteButton:document.createElement("button")}),t=e().todoFormContainer,n=e().todoTaskInput,o=e().taskList,a=e().mainTitle,c=e().dueDate,d=new class{constructor(){this.count=0}createTask(){for(let e=0;e<T.length;e++){const t=T[e],d=(C[e],document.createElement("button")),s=document.createElement("input"),r=document.createElement("span"),i=document.createElement("div"),l=document.createElement("div"),u=(document.createElement("i"),document.createElement("p")),m=document.createElement("button");s.type="date",s.classList.add("dateInput"),i.classList.add("leftSide"),l.classList.add("rightSide"),m.classList.add("fa"),m.classList.add("fa-trash"),r.classList.add("taskDueDate");let p=c.value;d.classList.add("todoTitle");const h=n.value;t.title===a.innerText&&(t[`task${this.count}`]=h,""===p&&(p="No Due Date"),t[`date${this.count}`]=p,u.innerText=t[`task${this.count}`],r.innerText=t[`date${this.count}`],i.appendChild(u),l.appendChild(r),l.appendChild(m),d.appendChild(i),d.appendChild(l),o.appendChild(d),this.count++)}t.classList.remove("active"),n.value=""}removeTasks(){for(;o.firstChild;)o.removeChild(o.firstChild)}},s=e().addProjectButton,r=e().projectFormContainer,i=e().addTaskButton,l=e().todoFormContainer,u=e().todoForm,m=e().projectForm,p=e().projectList,h=e().projectNameInput,L=e().taskList,v=e().mainTitle,k=e().cancelButton,E=e().inbox,T=(e().checkIcon,e().todoTaskInput,e().allTaskLists,[]);T.push({title:"Inbox"}),s.addEventListener("click",(()=>{l.classList.remove("active"),r.classList.add("active")})),i.addEventListener("click",(()=>{r.classList.remove("active"),l.classList.add("active")}));const C=[],f=(m.addEventListener("submit",(e=>{d.count=0;const t=document.createElement("button");t.classList.add("projectNameContainer");const n=document.createElement("i"),o=document.createElement("span"),a=h.value;o.innerText=a,t.appendChild(n),t.appendChild(o),p.appendChild(t),T.push({title:a}),r.classList.remove("active"),h.value="",t.classList.contains("projectNameContainer")&&t.addEventListener("click",(e=>{d.removeTasks(),console.log("storage after d:"+JSON.stringify(T));const t=e.target.innerText;v.innerText=t;for(let e=0;e<T.length;e++){const t=T[e];if(t.title===v.innerText){const e=Object.keys(t);for(let n=0;n<e.length;n++)if(null!=t[`task${n}`]){const e=document.createElement("button"),o=document.createElement("span"),a=document.createElement("p"),c=document.createElement("div"),d=document.createElement("div"),s=document.createElement("button");s.classList.add("fa"),s.classList.add("fa-trash"),c.classList.add("leftSide"),d.classList.add("rightSide"),e.classList.add("todoTitle"),o.classList.add("taskDueDate"),a.innerText=t[`task${n}`],o.innerText=t[`date${n}`],c.appendChild(a),d.appendChild(o),d.appendChild(s),e.appendChild(c),e.appendChild(d),L.appendChild(e)}}}f()}))})),()=>{const e=document.querySelectorAll(".fa-trash");if(e[0]){let t,n;e.forEach((e=>{t=e})),t.parentNode,e&&e.forEach((e=>{e.addEventListener("click",(t=>{console.log(e),n=e.parentNode.parentNode,n.remove();for(let e=0;e<T.length;e++){const t=T[e];for(const e in t)t[e]===n.firstChild.textContent&&(console.log(`date${e.split("")[4]}`),delete t[e],delete t[`date${e.split("")[4]}`])}}))}))}});u.addEventListener("submit",(()=>{d.createTask(),f()})),k.forEach((e=>{e.addEventListener("click",(()=>{r.classList.remove("active"),l.classList.remove("active")}))})),E.addEventListener("click",(e=>{d.removeTasks(),v.innerText="inbox";const t=e.target.innerText;v.innerText=t;for(let e=0;e<T.length;e++){const t=T[e];if(null!=t){const e=Object.keys(t);for(let n=0;n<e.length;n++)if(null!=t[`date${n}`]){const e=document.createElement("button"),o=document.createElement("span"),a=document.createElement("p");e.classList.add("todoTitle"),o.classList.add("taskDueDate"),a.innerText=t[`task${n}`],o.innerText=t[`date${n}`],e.appendChild(a),e.appendChild(o),L.appendChild(e)}}}}));const y=new Event("click");E.dispatchEvent(y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,