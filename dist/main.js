(()=>{"use strict";const e=()=>({addButton:document.querySelector(".addButton"),cancelButton:document.querySelectorAll(".cancelButton"),addProjectButton:document.querySelector(".addProjectButton"),addTaskButton:document.querySelector(".addTaskButton"),projectFormContainer:document.querySelector(".projectFormContainer"),todoFormContainer:document.querySelector(".todoFormContainer"),projectList:document.querySelector(".projectList"),projectForm:document.querySelector(".projectForm"),todoForm:document.querySelector(".todoForm"),projectNameInput:document.querySelector(".projectNameInput"),todoTaskInput:document.querySelector(".todoTaskInput"),taskList:document.querySelector(".tasks"),allTaskLists:document.querySelector(".todoTitle"),projectNameContainer:document.querySelector(".projectNameContainer"),mainTitle:document.querySelector(".mainTitle"),inbox:document.getElementById("inbox"),dueDate:document.getElementById("date"),checkIcon:document.getElementsByTagName("p")}),t=e().todoFormContainer,n=e().todoTaskInput,o=e().taskList,a=e().mainTitle,c=e().dueDate,d=new class{constructor(){this.count=0}createTask(){for(let e=0;e<E.length;e++){const t=E[e],d=(C[e],document.createElement("button")),s=document.createElement("input"),r=document.createElement("span"),i=document.createElement("div"),l=document.createElement("div"),u=(document.createElement("i"),document.createElement("p"));s.type="date",s.classList.add("dateInput"),i.classList.add("leftSide"),r.classList.add("taskDueDate");let m=c.value;d.classList.add("todoTitle");const p=n.value;t.title===a.innerText&&(t[`task${this.count}`]=p,""===m&&(m="No Due Date"),t[`date${this.count}`]=m,u.innerText=t[`task${this.count}`],r.innerText=t[`date${this.count}`],i.appendChild(u),l.appendChild(r),d.appendChild(i),d.appendChild(l),o.appendChild(d),this.count++)}t.classList.remove("active"),n.value=""}removeTasks(){for(;o.firstChild;)o.removeChild(o.firstChild)}},s=e().addProjectButton,r=e().projectFormContainer,i=e().addTaskButton,l=e().todoFormContainer,u=e().todoForm,m=e().projectForm,p=e().projectList,T=e().projectNameInput,k=e().taskList,h=e().mainTitle,v=e().cancelButton,L=e().inbox,E=(e().checkIcon,e().todoTaskInput,e().allTaskLists,[]);E.push({title:"Inbox"}),s.addEventListener("click",(()=>{l.classList.remove("active"),r.classList.add("active")})),i.addEventListener("click",(()=>{r.classList.remove("active"),l.classList.add("active")}));const C=[];m.addEventListener("submit",(e=>{d.count=0;const t=document.createElement("button");t.classList.add("projectNameContainer");const n=document.createElement("i"),o=document.createElement("span"),a=T.value;o.innerText=a,t.appendChild(n),t.appendChild(o),p.appendChild(t),E.push({title:a}),r.classList.remove("active"),T.value="",t.classList.contains("projectNameContainer")&&t.addEventListener("click",(e=>{d.removeTasks();const t=e.target.innerText;h.innerText=t;for(let e=0;e<E.length;e++){const t=E[e];if(t.title===h.innerText){const e=Object.keys(t);for(let n=0;n<e.length;n++)if(null!=t[`task${n}`]){const e=document.createElement("button"),o=document.createElement("span"),a=document.createElement("p");e.classList.add("todoTitle"),o.classList.add("taskDueDate"),a.innerText=t[`task${n}`],o.innerText=t[`date${n}`],e.appendChild(a),e.appendChild(o),k.appendChild(e)}}}}))})),u.addEventListener("submit",(()=>{d.createTask(),console.log("storage::"+JSON.stringify(E))})),v.forEach((e=>{e.addEventListener("click",(()=>{r.classList.remove("active"),l.classList.remove("active")}))})),L.addEventListener("click",(e=>{d.removeTasks(),h.innerText="inbox";const t=e.target.innerText;h.innerText=t;for(let e=0;e<E.length;e++){const t=E[e];if(null!=t){const e=Object.keys(t);for(let n=0;n<e.length;n++)if(null!=t[`date${n}`]){const e=document.createElement("button"),o=document.createElement("span"),a=document.createElement("p");e.classList.add("todoTitle"),o.classList.add("taskDueDate"),a.innerText=t[`task${n}`],o.innerText=t[`date${n}`],e.appendChild(a),e.appendChild(o),k.appendChild(e)}}}}));const y=new Event("click");L.dispatchEvent(y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,